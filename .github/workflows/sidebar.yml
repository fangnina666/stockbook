name: Sync reports_his & Generate _sidebar.md

on:
  schedule:
    - cron: '0 * * * *'   # 每天 00:00 UTC（台灣 08:00）
  workflow_dispatch:

permissions:
  contents: write

jobs:
  sync_and_build_sidebar:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout target repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Clone public repo (sparse reports_his only)
        run: |
          git clone --depth 1 --filter=blob:none --sparse https://github.com/fangnina666/gitbook.git src
          cd src
          git sparse-checkout set reports_his
          cd ..

      - name: Sync to target reports_his (with delete)
        run: |
          mkdir -p reports_his
          if [ -d src/reports_his ]; then
            rsync -av --delete src/reports_his/ reports_his/
          else
            echo "WARN: src/reports_his not found; leaving reports_his as-is"
          fi
          rm -rf src

      - name: Ensure Docsify essentials (.nojekyll & README.md)
        run: |
          set -euo pipefail
          [ -f .nojekyll ] || touch .nojekyll
          if [ ! -f README.md ]; then
            {
              printf '%s\n' '# 歡迎來到 StockBook'
              printf '%s\n' '- 從左側選擇報告，或前往 [reports_his](#/reports_his/)。'
            } > README.md
          fi

      - name: Generate _sidebar.md from reports_his
        shell: bash
        run: |
          set -euo pipefail
          SIDEBAR_PATH="_sidebar.md"
          echo "Generating ${SIDEBAR_PATH} from reports_his/*.md ..."
          # 依「最後修改時間」排序（新→舊）
          mapfile -t FILES < <(find reports_his -maxdepth 1 -type f -name "*.md" -printf "%T@ %f\n" | sort -nr | awk '{ $1=""; sub(/^ /,""); print }')
          {
            echo "- [首頁](/README.md)"
            echo "- 報告列表"
            if [ ${#FILES[@]} -eq 0 ]; then
              echo "  - （目前沒有檔案）"
            else
              for f in "${FILES[@]}"; do
                title="${f%.md}"
                safe_path="reports_his/${f// /%20}"
                echo "  - [${title}](/${safe_path})"
              done
            fi
          } > "${SIDEBAR_PATH}"
          echo "✅ ${SIDEBAR_PATH} generated."

      - name: Generate hierarchical _sidebar.md (Y/M/D, switchable title)
        shell: bash
        env:
          TITLE_SOURCE: filename   # filename 或 h1（未設視同 h1）
        run: |
          set -euo pipefail
          SIDEBAR_PATH="_sidebar.md"
          ROOT_DIR="reports_his"
      
          mapfile -t RAW < <(find "${ROOT_DIR}" -maxdepth 1 -type f -name "*.md" -printf '%T@|%f\n')
      
          LINES=()
          for line in "${RAW[@]}"; do
            epoch="${line%%|*}"; file="${line#*|}"; epoch_int="${epoch%.*}"
            dn="$(printf '%s' "$file" | grep -oE '[0-9]{8}(_[0-9]{6})?' | tail -n1 || true)"
            if [[ -n "$dn" ]]; then ymd="${dn:0:8}"; else ymd="$(date -u -d "@${epoch_int}" +%Y%m%d)"; fi
            LINES+=("${ymd}|${epoch}|${file}")
          done
          IFS=$'\n' LINES_SORTED=($(printf '%s\n' "${LINES[@]}" | sort -r -t '|' -k1,1 -k2,2)); unset IFS
      
          get_title() {
            local path="$1"
            if [[ "${TITLE_SOURCE:-h1}" == "filename" ]]; then
              basename "${path}" .md
              return
            fi
            # 抓第一個 ATX 標題（支援 #..###### + 空白），並剝掉 # 與左右空白
            awk '
              /^[[:space:]]*#{1,6}[[:space:]]+/ {
                sub(/^[[:space:]]*#{1,6}[[:space:]]+/, "", $0);
                gsub(/^[[:space:]]+|[[:space:]]+$/, "", $0);
                print $0; exit
              }
            ' "$path" 2>/dev/null
          }
      
          {
            echo "- [首頁](/README.md)"
            echo "- 報告列表"
            if [ ${#LINES_SORTED[@]} -eq 0 ]; then
              echo "  - （目前沒有檔案）"
            else
              cur_y=""; cur_m=""; cur_day=""
              for item in "${LINES_SORTED[@]}"; do
                ymd="${item%%|*}"; rest="${item#*|}"; file="${rest#*|}"
                y="${ymd:0:4}"; m="${ymd:4:2}"; d="${ymd:6:2}"
                full="${ROOT_DIR}/${file}"
                title="$(get_title "${full}")"
                [[ -z "$title" ]] && title="${file%.md}"
                safe_path="${ROOT_DIR}/${file// /%20}"
      
                if [[ "$y" != "$cur_y" ]]; then echo "  - ${y} 年"; cur_y="$y"; cur_m=""; cur_day=""; fi
                if [[ "$m" != "$cur_m" ]]; then echo "    - ${m} 月"; cur_m="$m"; cur_day=""; fi
                label="${y}-${m}-${d}"
                if [[ "$label" != "$cur_day" ]]; then echo "      - ${label}"; cur_day="$label"; fi
                echo "        - [${title}](/${safe_path})"
              done
            fi
          } > "${SIDEBAR_PATH}"
          echo "✅ ${SIDEBAR_PATH} generated."


      - name: Commit and push if changed (reports_his + _sidebar.md + README.md + .nojekyll)
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add reports_his/ _sidebar.md README.md .nojekyll || true
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            TS="$(date -u +'%Y-%m-%d %H:%M:%S') UTC"
            git commit -m "chore: sync reports_his from gitbook & regenerate _sidebar.md at ${TS}"
            git push
          fi
